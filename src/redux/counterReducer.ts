import { createSlice, PayloadAction } from '@reduxjs/toolkit';

// Define the shape of a cart item
export interface CartItem {
  icon: string;
  name: string;
  weight: number; // Added weight property to the CartItem interface
  quantity: number;
  price: number;
}

// Define the shape of the cart state
export interface CartState {
  cartItems: CartItem[];
}

// Define the initial state for the cart slice
const initialState: CartState = {
  cartItems: [],
};

// Create a cart slice using createSlice from Redux Toolkit
export const cartSlice = createSlice({
  name: 'cart', // Set the slice name
  initialState, // Set the initial state
  reducers: {
    addToCart(state, action: PayloadAction<{ icon: string; name: string; weight: number }>) {
      // Extract payload values
      const { icon, name, weight } = action.payload;
      // Check if item already exists in cart
      const existingItem = state.cartItems.find(item => item.name === name);
      // If item exists, increase its quantity; otherwise, add it to the cart
      if (existingItem) {
        existingItem.quantity += 1;
      } else {
        state.cartItems.push({ icon, name, weight, quantity: 1, price: 0.5 });
      }
    },
    removeFromCart(state, action: PayloadAction<number>) {
      // Remove item from cart based on index
      state.cartItems = state.cartItems.filter((item, index) => index !== action.payload);
    },
    increaseQuantity(state, action: PayloadAction<string>) {
      // Increase quantity of a specific item in the cart
      const itemName = action.payload;
      const itemToIncrease = state.cartItems.find(item => item.name === itemName);
      if (itemToIncrease) {
        itemToIncrease.quantity += 1;
      }
    },
    decreaseQuantity(state, action: PayloadAction<string>) {
      // Decrease quantity of a specific item in the cart
      const itemName = action.payload;
      const itemToDecrease = state.cartItems.find(item => item.name === itemName);
      if (itemToDecrease && itemToDecrease.quantity > 0) {
        itemToDecrease.quantity -= 1;
      }
    },
  },
});

// Export actions generated by createSlice
export const { addToCart, removeFromCart, increaseQuantity, decreaseQuantity } = cartSlice.actions;

// Export the reducer function generated by createSlice
export default cartSlice.reducer;
